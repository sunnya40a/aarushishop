
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>User Data</title>
    <!-- Include Vue.js from a CDN -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js"></script>

    <!-- Include Axios for making HTTP requests -->
    <script src="https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js"></script>

    <!-- Include Tailwind CSS for styling -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
</head>
<body class="bg-gray-200">
    <div id="vue-app" class="p-4 bg-gray-300">
        <h1 class="text-2xl font-semibold mb-4">User Data Vue learn table</h1>
        <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
            <table class="table-fixed w-full text-m text-left text-gray-500 dark:text-gray-800">
                <thead class="text-l text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                    <tr>
                        <th class="text-left py-3 px-4 font-semibold">User ID</th>
                        <th class="text-left py-3 px-4 font-semibold">User</th>
                        <th class="text-left py-3 px-4 font-semibold">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="user in users" :key="user.client_id" class="hover:bg-blue-400">
                        <td class="py-3 px-4">[[ user.client_id ]]</td>
                        <td class="py-3 px-4">[[ user.uname ]]</td>
                        <td class="py-3 px-4">
                            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @click="editUser(user)">Edit</button>
                            <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded" @click="deleteUser(user)">Delete</button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <!-- +Add button -->
    <div class="text-center mt-4">
        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @click="showAddForm">+ Add</button>
    </div>

    <!-- Add Data Form (Initially hidden) -->
    <div id="add-form" class="container mt-4" v-if="isAddFormVisible">
        <div class="bg-light p-4 rounded">
            <h2 class="text-2xl font-semibold mb-4">Add New User</h2>
            <form @submit.prevent="saveNewUser" method="post" action="/api/users">
                <div class="form-group">
                    <label for="client_id">User ID</label>
                    <input type="text" id="client_id" v-model="newUser.client_id" class="form-control">
                </div>
                <div class="mt-4"></div>
                <div class="form-group">
                    <label for="uname">User Name</label>
                    <input type="text" id="uname" v-model="newUser.uname" class="form-control">
                </div>
                <div class="text-right mt-4">
                    <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full mr-2">Save</button>
                    <button type="button" @click="closeAddForm" class="bg-gray-300 hover:bg-gray-400 text-gray-700 font-bold py-2 px-4 rounded-full">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        new Vue({
            el: '#vue-app',
            delimiters: ['[[', ']]'],
            data: {
                users: [],
                newUser: {
                    client_id: '',
                    uname: '',
                },
                isAddFormVisible: false,
            },
            methods: {
                editUser(user) {
                    console.log('Editing user', user);
                },
                deleteUser(user) {
                    console.log('Deleting user', user);
                },
                saveNewUser() {
                    // Create a data object from the newUser fields
                    const data = {
                        client_id: this.newUser.client_id,
                        uname: this.newUser.uname,
                    };

                    // Make an AJAX POST request to your server to save the new user data
                        axios.post('/api/users', data, {
                        headers: {
                            'Content-Type': 'application/json',
                        }
                        })
                        .then(response => {
                            // Assuming your server returns the newly added user, you can push it to the users array
                            this.users.push(response.data);

                            // Clear the newUser object
                            this.newUser.client_id = '';
                            this.newUser.uname = '';

                            // Close the form
                            this.isAddFormVisible = false;
                        })
                        .catch(error => {
                            console.error('Error saving user data:', error);
                        });
                },
                showAddForm() {
                    this.isAddFormVisible = true;
                },
                closeAddForm() {
                    this.isAddFormVisible = false;
                },
            },
            mounted: function() {
                // Make an AJAX request to your Go server
                axios.get('/api/users')
                    .then(response => {
                        this.users = response.data.user;
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                    });
            },
        });
    </script>
</body>
</html>
